# -*- coding: utf-8 -*-
"""Soil Water Characteristic

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ag90d_0tFwJWKJF0beJlc6db3C_Lcj_B

# **SwcPy**
"""

import math

"""## Moisture Regressions"""

def humedad_1500kPa(S , C , OM):
  u1500t = -0.024 * S + 0.487 * C + 0.006 * OM + 0.005*(S * OM) - 0.013*(C * OM) + 0.068*(S * C) + 0.031
  u1500 = u1500t + (0.14 * u1500t - 0.02)

  return u1500 # fraccion %V de 0 a 1

"""
humedad_1500kPa(0.846272727272727 , 0.0430151515151515 , 2.08)
"""

def humedad_33kPa(S , C , OM):
  u33t = -0.251*S + 0.195*C + 0.011*OM + 0.006*(S * OM) - 0.027*(C * OM) + 0.452*(S * C) + 0.299
  u33  = u33t + (1.283*(u33t)**2 - 0.374*(u33t) - 0.015)

  return u33 # fraccion %V de 0 a 1

"humedad_33kPa(0.846272727272727 , 0.0430151515151515 , 2.08)"

def humedadSaturada_33kPa(S , C , OM):
  uSat_33t = 0.278 * S + 0.034*C + 0.022 * OM - 0.018*(S * OM) - 0.027*(C * OM) - 0.584*(S * C) + 0.078
  uSat_33  = uSat_33t + (0.636 * uSat_33t - 0.107)
  return uSat_33

"humedadSaturada_33kPa(0.846272727272727 , 0.0430151515151515 , 2.08)"

def humedadSaturada_0kPa(S , C , OM):
  # densidad normal
  return humedadSaturada_33kPa(S , C , OM) + humedad_33kPa(S , C , OM) -  0.097* S + 0.043

#"""
humedadSaturada_0kPa(0.846272727272727 , 0.0430151515151515 , 2.08)
#"""

def densidadNormal_gcm3(S , C , OM):
  return (1 - humedadSaturada_0kPa(S , C , OM) ) *2.65

"densidadNormal_gcm3(0.846272727272727 , 0.0430151515151515 , 2.08)"

"""## Density Effects"""

def densidadAjustada_gcm3(S , C , OM , DF=1):
  # DF = factor de densidad -> normal=1
  return densidadNormal_gcm3(S , C , OM)*DF

" densidadAjustada_gcm3( 0.846272727272727 , 0.0430151515151515 , 2.08 , 1) "

def humedadSaturada_0kPaAjustadaDensidad(S , C , OM , DF):
  # adjusted density
  return 1 - densidadAjustada_gcm3(S , C , OM ,DF )/ 2.65

" humedadSaturada_0kPaAjustadaDensidad(0.846272727272727 , 0.0430151515151515 , 2.08 , DF =1) "

def humedad_33kPaAjustadaDensidad(S , C , OM , DF):
  # adjusted density
  return humedad_33kPa(S , C , OM) -0.2 * ( humedadSaturada_0kPa(S , C , OM) - humedadSaturada_0kPaAjustadaDensidad(S , C , OM , DF) )

" humedad_33kPaAjustadaDensidad(0.846272727272727 , 0.0430151515151515 , 2.08 , DF =1)"

def humedadSaturada_33kPaAjustadaDensidad(S , C , OM , DF):
  return humedadSaturada_0kPaAjustadaDensidad(S , C , OM , DF) - humedad_33kPaAjustadaDensidad(S , C , OM , DF)
"""
humedadSaturada_33kPaAjustadaDensidad(0.846272727272727 , 0.0430151515151515 , 2.08 , DF =1)
"""

"""## Gravel Effects"""

def fraccionDeVolumenDeGrava(S,C,OM,DF,RW):
  alfa = densidadAjustada_gcm3(S,C,OM,DF) / 2.65
  return (1-RW) / (1-RW * (1-1.5*alfa))

"""fraccionDeVolumenDeGrava(0.846272727272727 , 0.0430151515151515 , 2.08 , DF=1 , RW=0.0)"""

"""## Moistureâ€“Conductivity"""

def Lambda(S , C , OM , DF):
  a = math.log( humedad_33kPaAjustadaDensidad(S , C , OM , DF) )
  b = math.log( humedad_1500kPa(S , C , OM ))
  c = math.log( 1500 ) - math.log( 33 )
  return (a-b)/c

"""
Lambda(0.846272727272727 , 0.0430151515151515 , 2.08 , DF =1)
"""

def conductividadHidraulicaSaturada(S , C , OM , DF , RW):
  return 1930 * humedadSaturada_33kPaAjustadaDensidad(S , C , OM , DF)**(3-Lambda(S , C , OM , DF)) * fraccionDeVolumenDeGrava(S,C,OM,DF,RW)

"""
conductividadHidraulicaSaturada(0.846272727272727 , 0.0430151515151515 , 2.08 , DF=1 , RW=0.0)
"""

"""## Moisture-Tension"""

def tensionEntradaDeAire(S,C,OM,DF):
  uS_33 = humedadSaturada_33kPaAjustadaDensidad(S , C , OM , DF)
  Yet   = -21.67*S - 27.932*C - 81.975* uS_33 + 71.121*(S * uS_33) + 8.294*(C * uS_33) + 14.05*(S * C) + 27.161
  print(Yet)
  Ye    = Yet + (0.02*Yet**2 - 0.113* Yet - 0.70)
  return Ye

#tensionEntradaDeAire(0.85 , 0.04 , 2.0 , 1)

def B(S , C , OM , DF):
  a = math.log( 1500 ) - math.log( 33 )
  b = math.log( humedad_33kPaAjustadaDensidad( S , C , OM , DF ) )
  c = math.log( humedad_1500kPa( S , C , OM ) )
  return a/(b-c)

def A(S , C , OM , DF):
  return math.exp(math.log(33) + B(S , C , OM , DF) * math.log( humedad_33kPaAjustadaDensidad(S , C , OM , DF) ))

"""
print(B(0.846272727272727 , 0.0430151515151515 , 2.08 , DF =1))
print(A(0.846272727272727 , 0.0430151515151515 , 2.08 , DF =1))
"""



"""## Salinidad

### funcion resultante
"""

def humedad_1500kPaAjustada_Ec(S , C , OM , DF , EC):
  a = A(S,C,OM,DF)
  b = B(S,C,OM,DF)

  uSat = humedadSaturada_0kPaAjustadaDensidad( S , C , OM , DF)
  u_33 = humedadSaturada_33kPaAjustadaDensidad(S , C , OM , DF)
  humedad = 0 # humedad_1500kPa(S,C,OM)
  t = 0
  res=[]
  while humedad<1:
    if humedad!=0:
      t = a*(humedad**(-b)) + (uSat/ humedad) * 32 *EC
    if 1499.9 < t and t <1500:
      res.append((round(humedad,3)))
    humedad+=0.000001
  return min(res) # round(sum(res)/len(res),3) 


# humedad_1500kPaAjustada_Ec(0.6, 0.30, 2, 1 , 10)

"""### pruebas para llegar a la solucion

## Available-water
"""

def aguaDisponible(S , C , OM , DF):
  a = humedadSaturada_33kPaAjustadaDensidad(S , C , OM , DF)
  b = humedad_1500kPa(S,C,OM)
  return a-b 

aguaDisponible(0.85 , 0.04 , 2 , 1)

def aguaDisponibleAjustada_CE(S , C , OM , DF , CE):
  a = humedadSaturada_33kPaAjustadaDensidad(S , C , OM , DF)
  b = humedad_1500kPaAjustada_Ec(S,C,OM,DF,CE)
  return a-b

#aguaDisponibleAjustada_CE(0.85 , 0.04 , 2 , 1,5.4)

"""## caracteristicas del suelo"""

def wsc(S  , C , OM , DF=1, RW =0, CE=0):
  """
  S   = Arena ,   % fraccion de 0-1
  C   = Arcilla , % fraccion de 0-1
  OM  = MateriaOrganica , % 
  DF  = Compactacion , valor entre 0.9-1.3, normal = 1.0  
  RW  = Grava     % fraccion de 0-1
  CE  = conductividad electrica dS/m
  """

  hSat_33kPa_DF   = humedadSaturada_33kPaAjustadaDensidad(S , C , OM , DF)  # %V 0-1 = m3 Agua / m3 Suelo 
  h_1500          = humedad_1500kPa(S,C,OM)                                 # %V 0-1 = m3 Agua / m3 Suelo  (no ajustada a la CE) 
  hSat            = humedadSaturada_0kPaAjustadaDensidad(S , C , OM , DF)   # %V 0-1 = m3 Agua / m3 Suelo
  aguaDisp        = aguaDisponible(S , C , OM , DF)                         # cm/cm   (no ajustada a la CE ni a la grava)
  Ksat            = conductividadHidraulicaSaturada(S , C , OM , DF , RW)   # mm/hr
  densidad        = densidadAjustada_gcm3(S,C,OM,DF)                        # 

  if CE!=0:
    aguaD         = aguaDisponible(S , C , OM , DF) 
    h_1500        = humedad_1500kPaAjustada_Ec(S,C,OM,DF,CE)

  return [hSat_33kPa_DF , h_1500 , hSat , aguaDisp , Ksat , densidad]
  """
  return  { 
      "Capacidad de Campo": hSat_33kPa_DF , # %V 0-1 = m3 Agua / m3 Suelo 
      "Punto Marchitez Permanente":h_1500 , # %V 0-1 = m3 Agua / m3 Suelo 
      "humedad Saturada":hSat ,             # %V 0-1 = m3 Agua / m3 Suelo 
      "agua disponible":aguaD ,             # cm/cm 
      "Conduc hidraulica Sat":Ksat ,        # mm/hr
      "densidad": densidad }                # gr/cm3
  """

#wsc( S=0.7 , C=0.21 , OM=2.5 ,DF= 1 ,RW=0,CE=5.4)